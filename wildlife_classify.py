# -*- coding: utf-8 -*-
"""wildlife_classify.ipynb

Automatically generated by Colaboratory.

Original file is located at
"""

!unzip competition_VfIpjyh.zip

import os
import pandas as pd
from torchvision.io import read_image
import torch
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
import torchvision.transforms as transforms
import torchvision.io as io
import torchvision.models as models
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split

"""### Data Prep"""

sub_num = '2'

train_features = pd.read_csv("train_features.csv", index_col="id")
test_features = pd.read_csv("test_features.csv", index_col="id")
train_labels = pd.read_csv("train_labels.csv", index_col="id")
classes = sorted(train_labels.columns.unique())

frac = 1
y = train_labels.sample(frac=frac, random_state=1)
x = train_features.loc[y.index].filepath.to_frame()

x_train, x_eval, y_train, y_eval = train_test_split(
    x, y, stratify=y, test_size=0.25
)

class CustomImageDataset(Dataset):
    def __init__(self, filepaths, labels = None, transform=None, target_transform=None):
        self.labels = labels
        self.filepaths = filepaths
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return len(self.filepaths)

    def __getitem__(self, idx):
        img_path = self.filepaths.iloc[idx, 0]
        image = read_image(img_path, mode=io.image.ImageReadMode.RGB)
        id = self.filepaths.index[idx]
        if self.transform:
            image = self.transform(image)
        if self.target_transform:
            label = self.target_transform(label)
        if self.labels is not None:
          label = torch.tensor(self.labels.iloc[idx].values,
                                 dtype=torch.float)
          return id, image, label
        else:
          return id, image

transform = transforms.Compose(
    [transforms.ToPILImage(),
     transforms.Resize((224,224)),
     transforms.ToTensor(),
     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])

trainDataset = CustomImageDataset(x_train, y_train, transform, None)
trainLoader = DataLoader(trainDataset, batch_size=4, shuffle=True, num_workers=2)

# Display image and label.
id, train_features, train_labels = next(iter(trainLoader))
print(f"Feature batch shape: {train_features.size()}")
img = train_features[0].squeeze()
label = train_labels[0]
npimg = img.numpy()
plt.imshow(np.transpose(npimg, (1, 2, 0)))
plt.show()
print(f"Label: {label}")

"""## Model Train"""

class NetAdd(nn.Module):
  def __init__(self):
    super().__init__()
    self.fc1 = nn.Linear(2048, 100)
    self.act1 = nn.ReLU()
    self.dropout = nn.Dropout(0.1)
    self.fc2 = nn.Linear(100,8)
  def forward(self,x):
    x = self.act1(self.fc1(x))
    x = self.dropout(x)
    x = self.fc2(x)
    return x

net = models.resnet50(pretrained=True)
net_add = NetAdd()
net.fc = net_add

device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')
net.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)

for epoch in range(2):  # loop over the dataset multiple times

    running_loss = 0.0
    for i, data in enumerate(trainLoader, 0):
        # get the inputs; data is a list of [inputs, labels]
        inputs, labels = data[1].to(device), data[2].to(device)

        # zero the parameter gradients
        optimizer.zero_grad()

        # forward + backward + optimize
        outputs = net(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()

        # print statistics
        running_loss += loss.item()
        if i % 200 == 199:    # print every 100 mini-batches
            print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
            running_loss = 0.0

print('Finished Training')

torch.save(net, f"model{sub_num}.pth")

"""## Validate"""

testDataset = CustomImageDataset(x_eval, y_eval, transform, None)
testLoader = DataLoader(testDataset, batch_size=4, shuffle=True, num_workers=2)

pred_outputs = pd.DataFrame()
act_outputs = pd.DataFrame()
with torch.no_grad():
    for data in testLoader:
        images, labels = data[1].to(device), data[2].to(device)
        logits = net(images)
        outputs = nn.functional.softmax(logits, dim=1)
        pred_outputs = pd.concat([pred_outputs,pd.DataFrame(torch.Tensor.cpu(outputs).numpy())])
        act_outputs = pd.concat([act_outputs, pd.DataFrame(data[2])])

pred_labels = pred_outputs.idxmax(axis = 1).apply(lambda x:classes[x]).reset_index(drop = True)
act_labels = act_outputs.idxmax(axis = 1).apply(lambda x:classes[x]).reset_index(drop = True)

correct = (pred_labels == act_labels).sum()
accuracy = correct / len(act_labels)
accuracy

"""## Submission"""

submDataset = CustomImageDataset(test_features, None, transform, None)
submLoader = DataLoader(submDataset, batch_size=4)

subm_outputs = pd.DataFrame()
with torch.no_grad():
    for data in submLoader:
        images = data[1].to(device)
        logits = net(images)
        outputs = nn.functional.softmax(logits, dim=1)
        subm_outputs = pd.concat([subm_outputs,
                                  pd.DataFrame(data = torch.Tensor.cpu(outputs).numpy(),
                                               index = data[0],
                                               columns = classes)])
subm_outputs.index.names = ['id']

subm_outputs.to_csv(f'submission{sub_num}.csv')